// netlify/functions/telegram.js
// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Telegram ‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
// *** ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∏‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤:" ‡πÅ‡∏•‡πâ‡∏ß ***

export async function handler(event) {
  if (event.httpMethod !== 'POST') {
    return { statusCode: 405, body: 'Method Not Allowed' };
  }

  const token = process.env.TELEGRAM_TOKEN;
  if (!token) {
    return { statusCode: 500, body: 'Missing TELEGRAM_TOKEN' };
  }

  const {
    branch = '-',
    mode = 'open', // 'open' | 'close'
    date = '',
    time = '',
    stocks = [],  // [{name, value, unit}]
    orders = [],  // [string]
  } = JSON.parse(event.body || '{}');

  const CHAT_OPEN   = process.env.TELEGRAM_CHAT_ID_OPEN   || process.env.TELEGRAM_CHAT_ID;
  const CHAT_ORDERS = process.env.TELEGRAM_CHAT_ID_ORDERS || process.env.TELEGRAM_CHAT_ID;
  const CHAT_STOCKS = process.env.TELEGRAM_CHAT_ID_STOCKS || process.env.TELEGRAM_CHAT_ID;

  const api = (method) => `https://api.telegram.org/bot${token}/${method}`;

  const escape = (s='') =>
    String(s)
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');

  const headerLine = (title) =>
    `üì¶ ${title}\n‡∏™‡∏≤‡∏Ç‡∏≤: ${escape(branch)}\n‡πÄ‡∏ß‡∏•‡∏≤: ${escape(time || date)}`;

  const formatStocks = () => {
    const head = headerLine(mode === 'open' ? '‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ï‡πä‡∏≠‡∏Å (‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô)' : '‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ï‡πä‡∏≠‡∏Å (‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô)');
    if (!stocks || stocks.length === 0) {
      return `${head}\n\n‚Äî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‚Äî`;
    }
    const lines = stocks.map(
      (x) => `‚Ä¢ ${escape(x.name)}: ${escape(x.value)} ${escape(x.unit || '')}`.trim()
    );
    return `${head}\n\n${lines.join('\n')}`;
  };

  const formatOrders = () => {
    const head = headerLine('‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°');
    if (!orders || orders.length === 0) {
      return `${head}\n\n‚Äî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° ‚Äî`;
    }
    const lines = orders.map((n) => `‚Ä¢ ${escape(n)}`);
    return `${head}\n\n${lines.join('\n')}`;
  };

  async function send(chatId, text) {
    if (!chatId) return;
    await fetch(api('sendMessage'), {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        disable_web_page_preview: true,
      }),
    });
  }

  try {
    if (mode === 'open') {
      // ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô: ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ "‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ï‡πä‡∏≠‡∏Å (‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô)"
      await send(CHAT_OPEN, formatStocks());
    } else {
      // ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô: ‡πÅ‡∏¢‡∏Å‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      await send(CHAT_STOCKS, formatStocks()); // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
      await send(CHAT_ORDERS, formatOrders()); // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
    }
    return { statusCode: 200, body: JSON.stringify({ ok: true }) };
  } catch (e) {
    return { statusCode: 500, body: `Telegram error: ${e.message}` };
  }
}
